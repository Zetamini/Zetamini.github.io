<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zeta.im</id>
    <title>Zeta</title>
    <updated>2020-05-01T16:17:16.809Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zeta.im"/>
    <link rel="self" href="https://zeta.im/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://zeta.im/images/avatar.png</logo>
    <icon>https://zeta.im/favicon.ico</icon>
    <rights>All rights reserved 2020, Zeta</rights>
    <entry>
        <title type="html"><![CDATA[webhook 实现自动部署]]></title>
        <id>https://zeta.im/Automatic-deployment-with-webhook/</id>
        <link href="https://zeta.im/Automatic-deployment-with-webhook/">
        </link>
        <updated>2020-05-01T14:26:33.000Z</updated>
        <summary type="html"><![CDATA[<p>Git Hook(钩子) 是 Git 在代码提交、推送、合并等工作流程中引入的事件触发器，其中最常用的场景是代码检查，持续集成，自动部署等，本文主要讲解利用webhook 实现自动部署的两种方式。</p>
<h1 id="一-什么是git-webhook">一、什么是Git webhook</h1>
<p>Git 的 hook 分为本地仓库 hook 和服务器仓库 hook。</p>
<h2 id="一本地-hook">（一）本地 hook</h2>
<p>本地 hook 通常在代码的 .git/hooks 目录下，如下所示：</p>
<pre><code>$ hooks git:(master) ls
applypatch-msg.sample     pre-commit.sample             prepare-commit-msg.sample
commit-msg.sample         update.sample
post-update.sample        pre-push.sample
pre-applypatch.sample     pre-rebase.sample
</code></pre>
<p>默认情况下，这些脚本不会生效。使用时，只需将 <code>.sample</code> 后缀去掉，然后赋予脚本执行权限即可。<br>
本地 hook 主要用于代码静态分析、REVIEW、代码规范、命名规范等。</p>
<ul>
<li>pre-commit<br>
提交之前的代码检查，包括是否通过单元测试，静态代码分析</li>
<li>prepare-commit-msg<br>
提交信息之前，可用来生成默认的提交信息</li>
<li>commit-msg<br>
提交信息之后，可用来检查提交信息是否符合特定的格式</li>
<li>post-commit<br>
提交代码之后，一般用来通知代码已提交。</li>
<li>post-checkout<br>
checkout 代码之后，可用来设置工作目录、生成文档、生成静态资源等工作</li>
<li>post-merge<br>
合并代码之后，可用来保存 merge 操作中，git 没有保存的信息。</li>
<li>pre-push<br>
push 代码之前，可用来检查本次 push 的 commits 是否符合特定的标准。</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<p>Git Hook(钩子) 是 Git 在代码提交、推送、合并等工作流程中引入的事件触发器，其中最常用的场景是代码检查，持续集成，自动部署等，本文主要讲解利用webhook 实现自动部署的两种方式。</p>
<h1 id="一-什么是git-webhook">一、什么是Git webhook</h1>
<p>Git 的 hook 分为本地仓库 hook 和服务器仓库 hook。</p>
<h2 id="一本地-hook">（一）本地 hook</h2>
<p>本地 hook 通常在代码的 .git/hooks 目录下，如下所示：</p>
<pre><code>$ hooks git:(master) ls
applypatch-msg.sample     pre-commit.sample             prepare-commit-msg.sample
commit-msg.sample         update.sample
post-update.sample        pre-push.sample
pre-applypatch.sample     pre-rebase.sample
</code></pre>
<p>默认情况下，这些脚本不会生效。使用时，只需将 <code>.sample</code> 后缀去掉，然后赋予脚本执行权限即可。<br>
本地 hook 主要用于代码静态分析、REVIEW、代码规范、命名规范等。</p>
<ul>
<li>pre-commit<br>
提交之前的代码检查，包括是否通过单元测试，静态代码分析</li>
<li>prepare-commit-msg<br>
提交信息之前，可用来生成默认的提交信息</li>
<li>commit-msg<br>
提交信息之后，可用来检查提交信息是否符合特定的格式</li>
<li>post-commit<br>
提交代码之后，一般用来通知代码已提交。</li>
<li>post-checkout<br>
checkout 代码之后，可用来设置工作目录、生成文档、生成静态资源等工作</li>
<li>post-merge<br>
合并代码之后，可用来保存 merge 操作中，git 没有保存的信息。</li>
<li>pre-push<br>
push 代码之前，可用来检查本次 push 的 commits 是否符合特定的标准。</li>
</ul>
<!-- more -->
<h2 id="二服务器-hook">（二）服务器 hook</h2>
<p>服务器 hook 指代码传输到服务器时，在服务器端所做的一系列操作。</p>
<ul>
<li>pre-receive<br>
处理 push 操作之前，可以检查本次 push 的 commits 和文件是否符合特定的标准。</li>
<li>update<br>
update 与 pre-receive 操作类似，不同的是 pre-receive 只执行一次，而 update 可能执行多次。</li>
<li>post-receive<br>
整个提交过程完成之后，可用于更新其它服务或通知用户，比如发邮件告诉开发人员已提交代码，通知持续集成 (Continuous Integration) 服务器部署代码</li>
</ul>
<h2 id="三webhook">（三）webhook</h2>
<p>如果 Git 服务部署在自己的服务器上，如用 GitLab 搭建一套 Git 服务，则可以使用服务器 hook。如果使用了 GitHub、Bitbucket 等云端平台，那么只能使用 webhook 来完成脚本。<br>
webhook 本质上属于服务器 hook，因为发送通知的方式是网络请求，因此得名。使用 webhook 的步骤如下：<br>
1.设置用于接收请求的 URL。<br>
2.服务器收到 push、pull request、merge、tag 等操作时，会将相应信息发送给步骤 1 里的 URL。<br>
3.URL 对应的程序收到网络请求后，执行自动部署、邮件通知等操作。</p>
<figure data-type="image" tabindex="1"><img src="https://zeta.im/post-images/1588347043167.png" alt="" loading="lazy"></figure>
<h1 id="二-部署-webhook">二、部署 webhook</h1>
<p>部署webhook有很多方式，本文仅讲解使用github-webhook工具和在nginx+php环境下部署webhook的两种方式</p>
<h2 id="一github-webhook工具">（一）github-webhook工具</h2>
<h3 id="github-webhook-文档">github-webhook 文档</h3>
<ul>
<li>更多详情文档 https://github.com/yezihack/github-webhook</li>
</ul>
<h3 id="使用github-webhook">使用github-webhook</h3>
<h4 id="1go环境搭建">1.Go环境搭建</h4>
<h5 id="安装sudo-curl-wget-git-vim">安装Sudo、Curl、Wget、Git、Vim</h5>
<pre><code>apt update &amp;&amp; apt install sudo wget vim curl
</code></pre>
<h5 id="1下载go并解压">(1)下载GO并解压</h5>
<pre><code>curl -O https://dl.google.com/go/go1.14.2.linux-amd64.tar.gz
tar xvf  go1.14.2.linux-amd64.tar.gz
sudo chown -R root:root ./go
sudo mv go /usr/local
</code></pre>
<p>注意：虽然/usr/local/go是官方推荐的位置，但有些用户可能更喜欢或需要不同的路径。</p>
<h5 id="2设置go路径">(2)设置Go路径</h5>
<p>设置Go的根值，告诉Go在哪里查找其文件：</p>
<pre><code>vi ~/.profile
</code></pre>
<p>在文件末尾添加以下行：</p>
<pre><code>export GOPATH=$HOME/work
export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin
</code></pre>
<p>如果为Go选择了不同的安装位置，则应将以下行添加到此文件中</p>
<pre><code>export GOROOT=$HOME/go
export GOPATH=$HOME/work
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
</code></pre>
<p>注意：<code>export GOROOT=$HOME/go</code>在主目录中安装Go时所需的行<br>
在Go安装到位并设置必要的环境路径后，让我们通过编写一个简短的程序来确认我们的设置是否有效</p>
<pre><code>source ~/.profile
</code></pre>
<h4 id="2下载github-webhook工具">2.下载github-webhook工具</h4>
<pre><code>wget http://img.sgfoot.com/github-webhook1.4.1.linux-amd64.tar.gz
</code></pre>
<h4 id="3运行github-webhook">3.运行github-webhook</h4>
<h5 id="1安装">(1)安装</h5>
<pre><code>tar -zxvf github-webhook1.4.1.linux-amd64.tar.gz
cp github-webhook /usr/bin/
chmod u+x /usr/bin/github-webhook
</code></pre>
<h5 id="2运行">(2)运行</h5>
<ul>
<li>默认端口: 2020</li>
<li>有效访问地址: http://ip:2020/web-hook</li>
<li>-b 是shell脚本路径参数</li>
<li>-s 是github webhook设置的密码</li>
</ul>
<pre><code># 非后台运行
github-webhook -b [shell脚本路径] -s [github webhook设置的密码]

# 后台运行
nohup github-webhook -b [shell脚本路径] -s [github webhook设置的密码] &amp; 

# 定向日志输出
nohup github-webhook -b ~/webhook.sh -s sopsopsop &gt;&gt; ~/webhook.log 2&gt;&amp;1 &amp;
</code></pre>
<h5 id="3webhooksh脚本">(3)webhook.sh脚本</h5>
<pre><code>#! /bin/bash
SITE_PATH='/var/www/html'
USER='www-data'
USERGROUP='www-data'
cd $SITE_PATH
git reset --hard origin/master
git clean -f
git pull
git checkout master
chown -R $USER:$USERGROUP $SITE_PATH
</code></pre>
<p>赋予webhook.sh可执行权限</p>
<pre><code>chmod +x webhook.sh
</code></pre>
<p>这样每次在客户端 push 代码，服务器会发请求给 github-webhook，github-webhook检查通过后，启动 <code>webhook.sh</code> 进行自动部署。</p>
<h3 id="配置github-webhook">配置github webhook</h3>
<ul>
<li>填写你服务器的地址, http://ip:2020/web-hook</li>
<li>设置的密码必须与服务器运行github-webhook -s 设置的密码一致<br>
<img src="https://zeta.im/post-images/1588348742453.png" alt="" loading="lazy"><br>
<img src="https://zeta.im/post-images/1588348750655.png" alt="" loading="lazy"></li>
</ul>
<h2 id="二nginxphp环境下部署webhook">（二）nginx+php环境下部署webhook</h2>
<h3 id="环境">环境</h3>
<table>
<thead>
<tr>
<th style="text-align:left">Item</th>
<th style="text-align:left">Value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">域名</td>
<td style="text-align:left">www.qq.com</td>
</tr>
<tr>
<td style="text-align:left">接收请求的URL</td>
<td style="text-align:left">https://www.qq.com/webhook.php</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://zeta.im/hello-gridea/</id>
        <link href="https://zeta.im/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>