<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zetaxx.com</id>
    <title>Zeta</title>
    <updated>2021-03-01T15:58:13.497Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zetaxx.com"/>
    <link rel="self" href="https://zetaxx.com/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://zetaxx.com/images/avatar.png</logo>
    <icon>https://zetaxx.com/favicon.ico</icon>
    <rights>All rights reserved 2021, Zeta</rights>
    <entry>
        <title type="html"><![CDATA[“smartdns”+”pi-hole” 实现dns智能解析和缓存]]></title>
        <id>https://zetaxx.com/install-smartdns-and-pi-hole-on-debian/</id>
        <link href="https://zetaxx.com/install-smartdns-and-pi-hole-on-debian/">
        </link>
        <updated>2021-02-26T03:25:00.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="实现的功能">实现的功能</h1>
<p>smartdns负责智能解析出访问域名最快的IP地址，然后将这些信息储存进pihole中作为缓存。这样我们访问网站或其他地址就不用每次都需要解析了，而是直接从pihole中选择最优线路。</p>
<h1 id="配置debian">配置debian</h1>
<pre><code>apt-get install wget vim curl
</code></pre>
<h1 id="安装配置smartdns">安装配置smartdns</h1>
<h2 id="安装">安装</h2>
<pre><code>wget https://github.com/pymumu/smartdns/releases/download/Release33/smartdns.1.2020.09.08-2235.x86_64-linux-all.tar.gz
tar xvf smartdns.1.2020.09.08-2235.x86_64-linux-all.tar.gz
chmod +x ./smartdns/install
./smartdns/install -i
</code></pre>
<h2 id="配置">配置</h2>
<h3 id="配置文件">配置文件</h3>
<pre><code>nano /etc/smartdns/smartdns.conf
</code></pre>
<h3 id="修改smartdns的监听端口号">修改smartdns的监听端口号</h3>
<blockquote>
<p>找到”bind [::]:53“，将53端口改为其他任意端口号，比如5380</p>
</blockquote>
<h3 id="修改缓存大小">修改缓存大小</h3>
<blockquote>
<p>将缓存大小”cache-size 512“改为0，也就是”cache-size 0“，因为我们不需要smartdns的自带缓存，待会要将缓存设到pihole中去</p>
</blockquote>
<h3 id="禁止查询解析ipv6">禁止查询解析IPv6</h3>
<blockquote>
<p>将”#force-AAAA-SOA [yes/no]“改为”force-AAAA-SOA yes“</p>
</blockquote>
<h3 id="添加udp类型上游dns">添加UDP类型上游dns</h3>
<blockquote>
<p>添加UDP类型上游dns，用于国内解析。前3条是我这里本地电信的DNS，可以替换成你们本地的（需要自行百度查找）。后3条是公共的dns。</p>
</blockquote>
<h3 id="添加tls类型的上游dns">添加TLS类型的上游dns</h3>
<blockquote>
<p>添加TLS类型的上游dns，用于国外解析。我这里用的都是国外的公共dns，如8.8.8.8、8.8.4.4、1.1.1.1</p>
</blockquote>
<h3 id="启动smartdns">启动smartdns</h3>
<pre><code>systemctl start smartdns
</code></pre>
<h3 id="将smartdns添加为开机自动启动">将smartdns添加为开机自动启动</h3>
<pre><code>systemctl enable smartdns
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<h1 id="实现的功能">实现的功能</h1>
<p>smartdns负责智能解析出访问域名最快的IP地址，然后将这些信息储存进pihole中作为缓存。这样我们访问网站或其他地址就不用每次都需要解析了，而是直接从pihole中选择最优线路。</p>
<h1 id="配置debian">配置debian</h1>
<pre><code>apt-get install wget vim curl
</code></pre>
<h1 id="安装配置smartdns">安装配置smartdns</h1>
<h2 id="安装">安装</h2>
<pre><code>wget https://github.com/pymumu/smartdns/releases/download/Release33/smartdns.1.2020.09.08-2235.x86_64-linux-all.tar.gz
tar xvf smartdns.1.2020.09.08-2235.x86_64-linux-all.tar.gz
chmod +x ./smartdns/install
./smartdns/install -i
</code></pre>
<h2 id="配置">配置</h2>
<h3 id="配置文件">配置文件</h3>
<pre><code>nano /etc/smartdns/smartdns.conf
</code></pre>
<h3 id="修改smartdns的监听端口号">修改smartdns的监听端口号</h3>
<blockquote>
<p>找到”bind [::]:53“，将53端口改为其他任意端口号，比如5380</p>
</blockquote>
<h3 id="修改缓存大小">修改缓存大小</h3>
<blockquote>
<p>将缓存大小”cache-size 512“改为0，也就是”cache-size 0“，因为我们不需要smartdns的自带缓存，待会要将缓存设到pihole中去</p>
</blockquote>
<h3 id="禁止查询解析ipv6">禁止查询解析IPv6</h3>
<blockquote>
<p>将”#force-AAAA-SOA [yes/no]“改为”force-AAAA-SOA yes“</p>
</blockquote>
<h3 id="添加udp类型上游dns">添加UDP类型上游dns</h3>
<blockquote>
<p>添加UDP类型上游dns，用于国内解析。前3条是我这里本地电信的DNS，可以替换成你们本地的（需要自行百度查找）。后3条是公共的dns。</p>
</blockquote>
<h3 id="添加tls类型的上游dns">添加TLS类型的上游dns</h3>
<blockquote>
<p>添加TLS类型的上游dns，用于国外解析。我这里用的都是国外的公共dns，如8.8.8.8、8.8.4.4、1.1.1.1</p>
</blockquote>
<h3 id="启动smartdns">启动smartdns</h3>
<pre><code>systemctl start smartdns
</code></pre>
<h3 id="将smartdns添加为开机自动启动">将smartdns添加为开机自动启动</h3>
<pre><code>systemctl enable smartdns
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[编译OpenWRT固件]]></title>
        <id>https://zetaxx.com/make-config-openwrt/</id>
        <link href="https://zetaxx.com/make-config-openwrt/">
        </link>
        <updated>2021-02-18T06:58:13.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="准备工作">准备工作</h1>
<ul>
<li>安装Ubuntu 18 LTS x64</li>
<li>新建非root用户进行编译</li>
<li>全局科学上网</li>
<li>默认登陆IP 192.168.1.1, 密码 password</li>
</ul>
<h1 id="开始编译">开始编译</h1>
<h2 id="更新系统软件包">更新系统软件包</h2>
<pre><code>sudo apt-get update
</code></pre>
<blockquote>
<p>主要作用是更新在编译环境搭建时所安装的编译组件</p>
</blockquote>
<h2 id="安装必要依赖">安装必要依赖</h2>
<pre><code>sudo apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync
</code></pre>
<h2 id="拉取仓库">拉取仓库</h2>
<pre><code>git clone https://github.com/coolsnowwolf/lede
</code></pre>
<h2 id="进入lede目录">进入lede目录</h2>
<pre><code>cd lede
</code></pre>
<h2 id="定制与编译">定制与编译</h2>
<pre><code>./scripts/feeds update -a
./scripts/feeds install -a
make menuconfig
</code></pre>
<h2 id="下载dl库">下载dl库</h2>
<pre><code>make -j8 download V=s 下#载dl库
</code></pre>
<h2 id="编译固件">编译固件</h2>
<pre><code>make -j1 V=s #-j1 后面是线程数。第一次编译推荐用单线程
</code></pre>
<h2 id="二次编译">二次编译</h2>
<pre><code>cd lede
git pull
./scripts/feeds update -a &amp;&amp; ./scripts/feeds install -a
make defconfig
make -j8 download
make -j$(($(nproc) + 1)) V=s
</code></pre>
<h2 id="重新配置">重新配置</h2>
<pre><code>rm -rf ./tmp &amp;&amp; rm -rf .config
make menuconfig
make -j$(($(nproc) + 1)) V=s
</code></pre>
<p>编译完成后输出路径：/lede/bin/targets</p>
<h2 id=""></h2>
]]></summary>
        <content type="html"><![CDATA[<h1 id="准备工作">准备工作</h1>
<ul>
<li>安装Ubuntu 18 LTS x64</li>
<li>新建非root用户进行编译</li>
<li>全局科学上网</li>
<li>默认登陆IP 192.168.1.1, 密码 password</li>
</ul>
<h1 id="开始编译">开始编译</h1>
<h2 id="更新系统软件包">更新系统软件包</h2>
<pre><code>sudo apt-get update
</code></pre>
<blockquote>
<p>主要作用是更新在编译环境搭建时所安装的编译组件</p>
</blockquote>
<h2 id="安装必要依赖">安装必要依赖</h2>
<pre><code>sudo apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync
</code></pre>
<h2 id="拉取仓库">拉取仓库</h2>
<pre><code>git clone https://github.com/coolsnowwolf/lede
</code></pre>
<h2 id="进入lede目录">进入lede目录</h2>
<pre><code>cd lede
</code></pre>
<h2 id="定制与编译">定制与编译</h2>
<pre><code>./scripts/feeds update -a
./scripts/feeds install -a
make menuconfig
</code></pre>
<h2 id="下载dl库">下载dl库</h2>
<pre><code>make -j8 download V=s 下#载dl库
</code></pre>
<h2 id="编译固件">编译固件</h2>
<pre><code>make -j1 V=s #-j1 后面是线程数。第一次编译推荐用单线程
</code></pre>
<h2 id="二次编译">二次编译</h2>
<pre><code>cd lede
git pull
./scripts/feeds update -a &amp;&amp; ./scripts/feeds install -a
make defconfig
make -j8 download
make -j$(($(nproc) + 1)) V=s
</code></pre>
<h2 id="重新配置">重新配置</h2>
<pre><code>rm -rf ./tmp &amp;&amp; rm -rf .config
make menuconfig
make -j$(($(nproc) + 1)) V=s
</code></pre>
<p>编译完成后输出路径：/lede/bin/targets</p>
<h2 id=""></h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[加速GitHub资源拉取]]></title>
        <id>https://zetaxx.com/accelerate-to-pull-resources-from-github/</id>
        <link href="https://zetaxx.com/accelerate-to-pull-resources-from-github/">
        </link>
        <updated>2021-02-14T14:16:13.000Z</updated>
        <summary type="html"><![CDATA[<p>本文主要介绍在不进行多余网络配置的情况下，直接使用提供了 github 国内镜像服务的网站进行 github 各种资源拉取加速，在这里向各位提供 github 国内镜像服务的大佬们致敬。</p>
<h1 id="加速地址一览">加速地址一览</h1>
<ul>
<li>fastgit.org：https://doc.fastgit.org/</li>
<li>cnpmjs.org：https://github.com.cnpmjs.org/</li>
<li>gitclone.com：https://gitclone.com/</li>
<li>gitee：https://gitee.com/mirrors</li>
<li>GitHub 文件加速：https://gh.api.99988866.xyz/</li>
<li>Github 仓库加速：https://github.zhlh6.cn/</li>
<li>Github 仓库加速：http://toolwa.com/github/</li>
</ul>
<h1 id="加速-clone">加速 clone</h1>
<h2 id="方法一手动替换地址">方法一：手动替换地址</h2>
<pre><code>#原地址
$ git clone https://github.com/kubernetes/kubernetes.git
#改为
$ git clone https://github.com.cnpmjs.org/kubernetes/kubernetes.git
#或者
$ git clone https://hub.fastgit.org/kubernetes/kubernetes.git
#或者
$ git clone https://gitclone.com/github.com/kubernetes/kubernetes.git
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<p>本文主要介绍在不进行多余网络配置的情况下，直接使用提供了 github 国内镜像服务的网站进行 github 各种资源拉取加速，在这里向各位提供 github 国内镜像服务的大佬们致敬。</p>
<h1 id="加速地址一览">加速地址一览</h1>
<ul>
<li>fastgit.org：https://doc.fastgit.org/</li>
<li>cnpmjs.org：https://github.com.cnpmjs.org/</li>
<li>gitclone.com：https://gitclone.com/</li>
<li>gitee：https://gitee.com/mirrors</li>
<li>GitHub 文件加速：https://gh.api.99988866.xyz/</li>
<li>Github 仓库加速：https://github.zhlh6.cn/</li>
<li>Github 仓库加速：http://toolwa.com/github/</li>
</ul>
<h1 id="加速-clone">加速 clone</h1>
<h2 id="方法一手动替换地址">方法一：手动替换地址</h2>
<pre><code>#原地址
$ git clone https://github.com/kubernetes/kubernetes.git
#改为
$ git clone https://github.com.cnpmjs.org/kubernetes/kubernetes.git
#或者
$ git clone https://hub.fastgit.org/kubernetes/kubernetes.git
#或者
$ git clone https://gitclone.com/github.com/kubernetes/kubernetes.git
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Debian安装Docker]]></title>
        <id>https://zetaxx.com/Install-Docker-Engine-on-Debian/</id>
        <link href="https://zetaxx.com/Install-Docker-Engine-on-Debian/">
        </link>
        <updated>2021-01-31T09:39:46.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="准备工作">准备工作</h1>
<h2 id="uninstall-old-versions">Uninstall old versions</h2>
<pre><code>$ sudo apt-get remove docker docker-engine docker.io containerd runc
</code></pre>
<p>The contents of <code>/var/lib/docker/</code>, including images, containers, volumes, and networks, are preserved. The Docker Engine package is now called <code>docker-ce</code></p>
<h1 id="installation-methods">Installation methods</h1>
<h2 id="install-using-the-repository">Install using the repository</h2>
<h3 id="set-up-the-repository">SET UP THE REPOSITORY</h3>
<h4 id="update-the-apt-package-index-and-install-packages-to-allow-apt-to-use-a-repository-over-https">Update the apt package index and install packages to allow apt to use a repository over HTTPS:</h4>
<pre><code>$ sudo apt-get update
$ sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<h1 id="准备工作">准备工作</h1>
<h2 id="uninstall-old-versions">Uninstall old versions</h2>
<pre><code>$ sudo apt-get remove docker docker-engine docker.io containerd runc
</code></pre>
<p>The contents of <code>/var/lib/docker/</code>, including images, containers, volumes, and networks, are preserved. The Docker Engine package is now called <code>docker-ce</code></p>
<h1 id="installation-methods">Installation methods</h1>
<h2 id="install-using-the-repository">Install using the repository</h2>
<h3 id="set-up-the-repository">SET UP THE REPOSITORY</h3>
<h4 id="update-the-apt-package-index-and-install-packages-to-allow-apt-to-use-a-repository-over-https">Update the apt package index and install packages to allow apt to use a repository over HTTPS:</h4>
<pre><code>$ sudo apt-get update
$ sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Debian10中启用SSH和网络配置]]></title>
        <id>https://zetaxx.com/ssh-and-network-setting-on-debian/</id>
        <link href="https://zetaxx.com/ssh-and-network-setting-on-debian/">
        </link>
        <updated>2021-01-30T15:46:49.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="修改ssh">修改SSH</h1>
<pre><code>nano /etc/ssh/sshd_config
</code></pre>
<p>修改#PermitRootLogin prohibit-password为</p>
<pre><code>PermitRootLogin yes
</code></pre>
<h1 id="设置固定ip">设置固定ip</h1>
<p>修改/etc/network/interfaces</p>
<pre><code>auto eth0
iface eth0 inet static
address 10.10.10.11
netmask 255.255.255.0
gateway 10.10.10.1
</code></pre>
<h1 id="设置dns">设置DNS</h1>
<p>修改/etc/resolv.conf</p>
<pre><code>nameserver 10.10.10.1
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<h1 id="修改ssh">修改SSH</h1>
<pre><code>nano /etc/ssh/sshd_config
</code></pre>
<p>修改#PermitRootLogin prohibit-password为</p>
<pre><code>PermitRootLogin yes
</code></pre>
<h1 id="设置固定ip">设置固定ip</h1>
<p>修改/etc/network/interfaces</p>
<pre><code>auto eth0
iface eth0 inet static
address 10.10.10.11
netmask 255.255.255.0
gateway 10.10.10.1
</code></pre>
<h1 id="设置dns">设置DNS</h1>
<p>修改/etc/resolv.conf</p>
<pre><code>nameserver 10.10.10.1
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Debian10 安装 DenyHosts]]></title>
        <id>https://zetaxx.com/install-denyhosts-on-debian-10/</id>
        <link href="https://zetaxx.com/install-denyhosts-on-debian-10/">
        </link>
        <updated>2021-01-21T05:53:55.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="介绍">介绍</h1>
<p>DenyHosts是由Phil Schwartz开发并由许多开发人员维护的实用程序，旨在阻止sshd（ssh服务器）暴力攻击。最新版DenyHosts-3.1已支持Debian10，但只有Python3下面使用。</p>
<h1 id="安装前准备python工具">安装前准备python工具</h1>
<pre><code># apt install git python3-pip
</code></pre>
<h1 id="安装denyhosts">安装DenyHosts</h1>
<p>为了方便以后卸载，加上了（--record log）参数，也可以省略。</p>
<pre><code># git clone https://github.com/denyhosts/denyhosts.git
# cd denyhosts
# python3 setup.py install --record log
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<h1 id="介绍">介绍</h1>
<p>DenyHosts是由Phil Schwartz开发并由许多开发人员维护的实用程序，旨在阻止sshd（ssh服务器）暴力攻击。最新版DenyHosts-3.1已支持Debian10，但只有Python3下面使用。</p>
<h1 id="安装前准备python工具">安装前准备python工具</h1>
<pre><code># apt install git python3-pip
</code></pre>
<h1 id="安装denyhosts">安装DenyHosts</h1>
<p>为了方便以后卸载，加上了（--record log）参数，也可以省略。</p>
<pre><code># git clone https://github.com/denyhosts/denyhosts.git
# cd denyhosts
# python3 setup.py install --record log
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux安装KMS激活服务一键脚本]]></title>
        <id>https://zetaxx.com/one-key-install-kms-service/</id>
        <link href="https://zetaxx.com/one-key-install-kms-service/">
        </link>
        <updated>2020-08-09T09:18:18.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="介绍">介绍</h1>
<p>KMS是<code>Key Management System</code>的缩写，也就是密钥管理系统。这里所说的KMS毋庸置疑就是用来激活VOL版本的Windows和Office的KMS啦。经常能在网上看到有人提供的KMS服务器地址，那么你有没有想过自己也来搞一个这样的服务呢？而这样的服务在Github上已经有<a href="https://github.com/Wind4/vlmcsd">开源代码</a>实现了；<br>
本文就是在这个开源代码的基础上，由<a href="https://teddysun.com/530.html">秋水逸冰</a>开发了适用于三大Linux发行版的一键安装KMS服务的脚本；</p>
<h1 id="适用">适用</h1>
<p>系统支持：<code>CentOS 6+</code>,<code>Debian 7+</code>,<code>Ubuntu 12+</code><br>
虚拟技术：任意<br>
内存要求：≥128M</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="介绍">介绍</h1>
<p>KMS是<code>Key Management System</code>的缩写，也就是密钥管理系统。这里所说的KMS毋庸置疑就是用来激活VOL版本的Windows和Office的KMS啦。经常能在网上看到有人提供的KMS服务器地址，那么你有没有想过自己也来搞一个这样的服务呢？而这样的服务在Github上已经有<a href="https://github.com/Wind4/vlmcsd">开源代码</a>实现了；<br>
本文就是在这个开源代码的基础上，由<a href="https://teddysun.com/530.html">秋水逸冰</a>开发了适用于三大Linux发行版的一键安装KMS服务的脚本；</p>
<h1 id="适用">适用</h1>
<p>系统支持：<code>CentOS 6+</code>,<code>Debian 7+</code>,<code>Ubuntu 12+</code><br>
虚拟技术：任意<br>
内存要求：≥128M</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解决Debian 10 /etc/rc.local 开机启动问题]]></title>
        <id>https://zetaxx.com/solves-Debian-10-the-startup-problem-of-rc-local/</id>
        <link href="https://zetaxx.com/solves-Debian-10-the-startup-problem-of-rc-local/">
        </link>
        <updated>2020-07-22T13:56:56.000Z</updated>
        <summary type="html"><![CDATA[<p>由于某些软件没有开机自动启动的服务，很多时候需要手工添加，一般我们都是推荐添加命令到<code>/etc/rc.local</code>文件，但是 <code>Debian 10</code> 默认不带 <code>/etc/rc.local</code>文件，而 <code>rc.local</code>服务却还是自带的。</p>
]]></summary>
        <content type="html"><![CDATA[<p>由于某些软件没有开机自动启动的服务，很多时候需要手工添加，一般我们都是推荐添加命令到<code>/etc/rc.local</code>文件，但是 <code>Debian 10</code> 默认不带 <code>/etc/rc.local</code>文件，而 <code>rc.local</code>服务却还是自带的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dnsmasq SNIproxy One-click Install]]></title>
        <id>https://zetaxx.com/dnsmasq-sniproxy-one-click-install/</id>
        <link href="https://zetaxx.com/dnsmasq-sniproxy-one-click-install/">
        </link>
        <updated>2020-07-17T11:50:12.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="脚本说明">脚本说明：</h1>
<ul>
<li>原理简述：使用Dnsmasq的DNS将网站解析劫持到SNI proxy反向代理的页面上。</li>
<li>用途：让无法观看流媒体的VPS可以观看（前提：VPS中要有一个是能观看流媒体的）。</li>
<li>特性：脚本默认解锁Netflix Hulu HBO等，如需增删流媒体域名请编辑文件<code>/etc/dnsmasq.d/custom_netflix.conf和/etc/sniproxy.conf</code></li>
<li>脚本支持系统：CentOS6+, Debian8+, Ubuntu16+<br>
-- CentOS6/7/8， Debian8/9/10, Ubuntu16/18 已测试成功<br>
-- 理论上不限虚拟化类型，如有问题请反馈<br>
-- 如果脚本最后显示的IP和实际公网IP不相符，请修改一下文件<code>/etc/sniproxy.conf</code>中的IP地址</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<h1 id="脚本说明">脚本说明：</h1>
<ul>
<li>原理简述：使用Dnsmasq的DNS将网站解析劫持到SNI proxy反向代理的页面上。</li>
<li>用途：让无法观看流媒体的VPS可以观看（前提：VPS中要有一个是能观看流媒体的）。</li>
<li>特性：脚本默认解锁Netflix Hulu HBO等，如需增删流媒体域名请编辑文件<code>/etc/dnsmasq.d/custom_netflix.conf和/etc/sniproxy.conf</code></li>
<li>脚本支持系统：CentOS6+, Debian8+, Ubuntu16+<br>
-- CentOS6/7/8， Debian8/9/10, Ubuntu16/18 已测试成功<br>
-- 理论上不限虚拟化类型，如有问题请反馈<br>
-- 如果脚本最后显示的IP和实际公网IP不相符，请修改一下文件<code>/etc/sniproxy.conf</code>中的IP地址</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VPS DD debian 系统]]></title>
        <id>https://zetaxx.com/vps-dd-debian-system/</id>
        <link href="https://zetaxx.com/vps-dd-debian-system/">
        </link>
        <updated>2020-07-16T13:07:32.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="一-查看虚拟机的ip跟其上级ip">一、查看虚拟机的ip跟其上级ip</h1>
<pre><code>ip route show
</code></pre>
<p>把查到的ip填入最下面的dd命令里。</p>
<h1 id="二-安装dd运行所需的依赖">二、安装DD运行所需的依赖</h1>
<h2 id="当前系统为centos时">当前系统为centos时</h2>
<pre><code>yum install -y xz openssl gawk file
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<h1 id="一-查看虚拟机的ip跟其上级ip">一、查看虚拟机的ip跟其上级ip</h1>
<pre><code>ip route show
</code></pre>
<p>把查到的ip填入最下面的dd命令里。</p>
<h1 id="二-安装dd运行所需的依赖">二、安装DD运行所需的依赖</h1>
<h2 id="当前系统为centos时">当前系统为centos时</h2>
<pre><code>yum install -y xz openssl gawk file
</code></pre>
]]></content>
    </entry>
</feed>